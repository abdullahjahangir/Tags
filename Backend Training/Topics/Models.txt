from django.db import models

   ~~~ Field types ~~~
IntegerField, BigAutoField, BooleanField, CharField, DateTimeField, DecimalField
, EmailField, FileField, ImageField
====================================================================================================    
    ~~~Field options~~~
1- Null vs Blank
null is purely database-related, whereas blank is validation/form-related
====================================================================================================
        ~~~ Primary & Verbose ~~~
user_id = models.BigAutoField(primary_key=True, verbose="Size")
====================================================================================================
        ~~~ Choice ~~~
class Person(models.Model):
    SHIRT_SIZES = (
        ('S', 'Small'),
        ('M', 'Medium'),
        ('L', 'Large'),
    )
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

>>> p = Person(name="Fred Flintstone", shirt_size="L")
>>> p.save()
>>> p.shirt_size
'L'
>>> p.get_shirt_size_display()
'Large'

====================================================================================================
                        ~~~~ Relationships ~~~~

- one-to-one relationships

class Phone(models.Model):
    user = models.oneToOneField(User, on_delete=models.CASCADE, related_name='number')

phone = User.objects.get(id=1).number | phone  # Phone Object
phone.phone_no  # get phone number
user = Phone.objects.get(id=1).user  # User Object
user.name  # get user's name

-----------------------------------------------------------------------------------------------------

- Many-to-one relationships

class Department(models.Model):
    name = models.CharField(max_length=30)

class Employee(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()
    department = models.ForeignKey(Department, on_delete=models.CASCADE, related_name='department')

Employee.objects.get(name='ALI').department.name
Employee.objects.filter(department__name='SALES')
Department.objects.filter(name='SALES').employee.all()
Department.objects.filter(name="SALES",employee__name__startwith='ALI')

-----------------------------------------------------------------------------------------------------

- Many-to-Many relationships

class Project(models.Model):
    name = models.CharField(max_length=30)
    tech_stack = models.CharField(max_length=30)

class Employee(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()
    Project = models.ManyToManyField(Project, on_delete=models.CASCADE, related_name='Projects')
                                    OR
    Project = models.ManyToManyField(Project, through="Employee_Project")

Proj1 = Project.objects.all().first()
Emp1 = Employee.objects.get(id=1)
Emp1.Projects.add(p1)
Emp1.Projects.set(Project.objects.all()[:5])
Emp1.Projects.all()
Emp1.Projects.count()
Emp1.Projects.remove(p1)
Emp1.Projects.clear()
Emp1.Projects.filter(tech_stack='Django')

Proj1 = Project.objects.all().first()
Proj1.employee_set.all()
Proj1.employee_set.set(Employee.objects.all()[0:5])
Proj1.employee_set.add(Emp1)
Proj1.employee_set.remove(Emp1)
Proj1.employee_set.clear()
Proj1.employee_set.filter(name__startwith='ALI')

class Employee_Project(models.Model):
    Project = models.ForeignKey(Department, on_delete=models.CASCADE, related_name='Projects')
    Employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='Employees')
    project_value = models.IntegerField()
    employee_commision_pct = models.IntegerField()

emp,created = Employee.objects.get_or_create(name="Saad")    
proj = Project.objects.first()
Employee_Project.objects.create(
    Employee=emp, Project=proj, project_value=1000,employee_commision_pct=10
)
Employee_Project.objects.filter(Employee=emp)
emp.Project.add(proj, through_defaults={'project_value':1000,'employee_commision_pct':10})

-----------------------------------------------------------------------------------------------------
            ~~~Self Join~~~
class Person(models.Model):
    name = models.CharField(max_length=30)
    mother = models.ForeignKey('self', related_name='son')
    siblings = models.ManyToManyField('self', related_name='siblings')
    partner = models.OneToOneField('self', related_name='partner')

Mary = Person.objects.create()
Mary.save()
John = Person.objects.create(mother=Mary)
John.save()
John.mother
Mary.son.get()

========================================================================================================

                                            Models across files
It’s perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, refer to the other model class wherever needed. For example:
from geography.models import ZipCode

class Restaurant(models.Model):
    # ...
    zip_code = models.ForeignKey(
        ZipCode,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
    )

=========================================================================================================
                                Field name restrictions
Django places some restrictions on model field names:

A field name cannot be a Python reserved word, because that would result in a Python syntax error. For example:

class Example(models.Model):
    pass = models.IntegerField() # 'pass' is a reserved word!
A field name cannot contain more than one underscore in a row, due to the way Django’s query lookup syntax works. For example:

class Example(models.Model):
    foo__bar = models.IntegerField() # 'foo__bar' has two underscores!
A field name cannot end with an underscore, for similar reasons.


========================================================================================================
                        Custom field types
def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

class PrimeIntegerField(models.IntegerField):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.validators.append(is_prime)

from django.core.exceptions import ValidationError
try:
    m = MyModel(prime_number=4)
    m.full_clean()  # Perform validation manually
    m.save()
except ValidationError as e:
    print("Validation Error:", e)

=======================================================================================

How does an ORM solve problems?:
- Simplifies database interactions, Cross-database compatibility
- Reduces code repetition, Protects against SQL injection

Difference between select_related and prefetch_related?:
select_related:
    - Performs a single SQL query to fetch related objects along with the primary object in a single database call.
    - It's used for fetching one-to-one and foreign key related objects.
    Employee.objects.select_related('Projects')
prefetch_related: 
    - Performs two separate SQL queries - one to fetch the primary objects and another to fetch the related objects.
    - It's used for fetching many-to-many and reverse foreign key related objects,
      and it's more efficient when dealing with large datasets.
      emp_name_start_with_a = Prefetch('Employee', queryset=Employee.objects.filter(name__startwith='A'))
      Projects.objects.prefetch_related(emp_name_start_with_a)


REST_TYPE = Q(type='IT') | Q(type='MEX')
NOT_OPENED_RECENTLY = ~Q(date_opened_gt='20-11-2019')
NEG_PROFIT = Q(F('restaurant__sale_income')<F('restaurant__sale_expenditure'))
RESTAURANT.objects.filter(REST_TYPE & NOT_OPENED_RECENTLY & NEG_PROFIT)
